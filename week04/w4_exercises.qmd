---
title: "Week 4 exercises: Version control with Git and GitHub"
pagetitle: "PRACS25: Week 4 exercises"
author: Jelmer Poelstra
date: 2025-09-22
number-sections: false
---

---------

<br>

In this exercise, you will primarily be practicing your Git skills.

A general tips to keep in mind is to keep checking the status of your repository (repo)
with **`git status`** before and after nearly all other Git commands that you issue.
This will help prevent mistakes, and will also help you understand Git better.

<hr style="height:1pt; visibility:hidden;" />

#### Part I: Local Git workflow

1. **Create a new directory at OSC for these exercises, and move there.**\
   For example, `/fs/ess/PAS2880/users/$USER/week03/exercises`.

2. **Initialize a local Git repository** inside your new directory.

3. **Create a README file in Markdown format.**\
   The file should be named `README.md`,
   and for now, just contain a *header* saying that this is a repository for your exercises.
   
4. **Stage and then commit the README file** with an appropriate commit message.

5. **Create a second Markdown file with some more contents.**\
   Name it as you like and in it, describe the basic Git workflow and commands
   with bullet points and headers^[
   Recall that in VS Code, you can open the Markdown preview on the side,
   so you can experiment and see whether your formatting is working the way you intend.
   ].
     
6. **Create at least two commits while you work on the Markdown file.**\
   Try to break your progress up into logical units that can be
   summarized with a descriptive commit message.
   
7. **Update the `README.md` file**.\
   Briefly describe the current contents of your repo now that you actually
   have some contents.

8. **Stage and commit the updated README file.**\

9. **Create a `results` directory with an empty file and make Git ignore this directory.**\
   Also, commit your `.gitignore` file.

<hr style="height:1pt; visibility:hidden;" />

#### Part II: Create and sync an online version of the repo

Phew, you made several commits! Time to share all this work with the world.

10. **Create a Github repository.**\
    Go to <https://github.com>, sign in, and create a new repository.
    It's a good idea to give it the same name as your local repo,
    but these names don't *have to* match.
    Like in class, you want to create an *empty* GitHub repository,
    because you will upload all the contents from your local repo.
    
11. **Push your local repo to the online one you just created.**\
    When you're done, click the `Code` button, and
    admire the nicely rendered README on the front page of your Github repo.

12. **Open a GitHub Issue**\
    As practice for when you need to do this for your Final Project submissions,
    open an Issue for your repo: in the Issues tab, click "New Issue",
    and in the box where you can type your issue, tag me. For example:
    
    ```markdown
    Hey @jelmerp, can you please take a look at my repo?
    ```
    
<br>

-----

<br>

## Solutions

<details><summary>**1.** Create a new directory at OSC for these exercises, and move there.</summary>
For example:

```bash
mkdir /fs/ess/PAS2880/users/$USER/week03/exercises
cd /fs/ess/PAS2880/users/$USER/week03/exercises
```
</details>

<details><summary>**2.** Initialize a local Git repository inside your new directory.</summary>

```bash
git init
```
</details>

<details><summary>**3.** Create a README file in Markdown format.</summary>

```bash
echo "# This dir is for the week3 exercises on Git" > README.md
```
</details>

<details><summary>**4.** Stage and then commit the README file with an appropriate commit message.</summary>

```bash
git add README.md
git commit -m "Added a README file"
```
</details>

<details><summary>**5.** Create a second Markdown file with some more contents.</summary>

Create a new empty file:

```bash
touch git_notes.md
```

Then, open the file in the VS Code editor and describe the Git workflow in your own words. 
</details>

<details><summary>**6.** Create at least two commits while you work on the Markdown file.</summary>

- First commit, after adding a first batch of content to the Markdown file:

```bash
git add git_notes.md
git commit -m "Started a document with notes on Git"
```

- Make additional changes to `git_notes.md`, and commit again:

```bash   
git add git_notes.md
git commit -m "Descriptive commit message #2"
```
</details>

<details><summary>**8.** Update the `README.md` file.</summary>

```bash
echo "Added a file with notes on Git" >> README.md
```
</details>

<details><summary>**8.** Stage and commit the updated README file.</summary>

```bash
git add README.md
git commit -m "Added a description of the repo's contents to the README"
```
</details>

<details><summary>**9.** Create a `results` dir and file, and make Git ignore this directory.</summary>

- Create the dir and file that should be ignored:
    
```bash
mkdir results
touch results/results.txt
```

- Create a gitignore file with instructions to ignore the `results` dir:

```bash
echo "results/" > .gitignore
```
    
- Add and commit the `.gitignore` file:

```bash
git add .gitignore
git commit -m "Added a gitignore file"
```
</details>

<details><summary>**11.** Push your local repo to the online one you just created.</summary>

- Step 1: Set up the connection to the remote repo:

```bash
# (replace <SSH-URL-to-repo> with your actual SSH (not HTTPS!) URL)
git remote add origin <SSH-URL-to-repo>
```
    
- Step 2: Push your local repo contents to the remote repo:

```bash
git push -u origin main
```
</details>
